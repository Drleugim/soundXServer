const req = require('supertest')
const jwt = require('jsonwebtoken')
const app = require('../app')
const { connect, disconnect, cleanup } = require('../db')
const User = require('../models/user.model')
const faker = require('faker')

describe('product',() => {
  let user
  let token

  beforeAll(async () => { await connect() })

  beforeEach(async() => {
    await cleanup()
    const userData= {
      email: faker.internet.email(),
      password: faker.internet.password(),
      name:  faker.name.firstName(),
      lastName: faker.name.lastName()
    } 
    user = await User.create(userData)
    token = jwt.sign(
      { userId: user._id },
      process.env.SECRET,
      { expiresIn: 60 * 60 * 24 * 365 }
    )
  })

  afterAll(async () => { await disconnect() })

  it('should succesfully publish a product', async() => {
    const res = await req(app)
      .post('/products/publish')
      .field("nameProduct",faker.commerce.product())
      .field("buyPrice", faker.commerce.price())
      .field("rentPrice",  faker.commerce.price())
      .field("quantity", faker.datatype.number())
      .field("brand", faker.company.companyName())
      .field("newUsed", faker.commerce.productAdjective())
      .field("description", faker.commerce.productDescription())
      .attach('picture', 'C:/Users/g0308/OneDrive/Pictures/profile.jpg')
      .set('Authorization', `Bearer ${token}`)
      .set('Content-Type', 'multipart/form-data')
    
    expect(res.statusCode).toBe(201)
  })
  it('should not publish product if user is not authenticated', async() => {
    const res = await req(app)
      .post('/products/publish')
      .field("nameProduct",faker.commerce.product())
      .field("buyPrice", faker.commerce.price())
      .field("rentPrice",  faker.commerce.price())
      .field("quantity", faker.datatype.number())
      .field("brand", faker.company.companyName())
      .field("newUsed", faker.commerce.productAdjective())
      .field("description", faker.commerce.productDescription())
      .set('Content-Type', 'multipart/form-data')
    
    expect(res.statusCode).toBe(401)
    expect(res.body.message).toMatch(/your session has expired/i)
  })
  it('should not publish product if name field is empty', async() => {
    const res = await req(app)
      .post('/products/publish')
      .field("nameProduct",'')
      .field("buyPrice", faker.commerce.price())
      .field("rentPrice",  faker.commerce.price())
      .field("quantity", faker.datatype.number())
      .field("brand", faker.company.companyName())
      .field("newUsed", faker.commerce.productAdjective())
      .field("description", faker.commerce.productDescription())
      .attach('picture', 'C:/Users/g0308/OneDrive/Pictures/profile.jpg')
      .set('Authorization', `Bearer ${token}`)
      .set('Content-Type', 'multipart/form-data')
    
      expect(res.statusCode).toBe(401)
      expect(res.body.message).toMatch(/product could not be created/i)
  })
  it('should not publish product buy price if buy price field is empty', async() => {
    const res = await req(app)
      .post('/products/publish')
      .field("nameProduct",faker.commerce.product())
      .field("buyPrice", '')
      .field("rentPrice",  faker.commerce.price())
      .field("quantity", faker.datatype.number())
      .field("brand", faker.company.companyName())
      .field("newUsed", faker.commerce.productAdjective())
      .field("description", faker.commerce.productDescription())
      .attach('picture', 'C:/Users/g0308/OneDrive/Pictures/profile.jpg')
      .set('Authorization', `Bearer ${token}`)
      .set('Content-Type', 'multipart/form-data')
    
    expect(res.statusCode).toBe(401)
    expect(res.body.message).toMatch(/product could not be created/i)
  })
  it('should not publish product if rent price field is empty', async() => {
    const res = await req(app)
      .post('/products/publish')
      .field("nameProduct",faker.commerce.product())
      .field("buyPrice", faker.commerce.price())
      .field("rentPrice",  '')
      .field("quantity", faker.datatype.number())
      .field("brand", faker.company.companyName())
      .field("newUsed", faker.commerce.productAdjective())
      .field("description", faker.commerce.productDescription())
      .attach('picture', 'C:/Users/g0308/OneDrive/Pictures/profile.jpg')
      .set('Authorization', `Bearer ${token}`)
      .set('Content-Type', 'multipart/form-data')
    
    expect(res.statusCode).toBe(401)
    expect(res.body.message).toMatch(/product could not be created/i)
  })
  it('should not publish product if quantity field is empty', async() => {
    const res = await req(app)
      .post('/products/publish')
      .field("nameProduct",faker.commerce.product())
      .field("buyPrice", faker.commerce.price())
      .field("rentPrice",  faker.commerce.price())
      .field("quantity", '0')
      .field("brand", faker.company.companyName())
      .field("newUsed", faker.commerce.productAdjective())
      .field("description", faker.commerce.productDescription())
      .attach('picture', 'C:/Users/g0308/OneDrive/Pictures/profile.jpg')
      .set('Authorization', `Bearer ${token}`)
      .set('Content-Type', 'multipart/form-data')
    
    expect(res.statusCode).toBe(401)
    expect(res.body.error.message).toMatch(/product validation failed/i)
  })
  it('should not publish product if brand field is empty', async() => {
    const res = await req(app)
      .post('/products/publish')
      .field("nameProduct",faker.commerce.product())
      .field("buyPrice", faker.commerce.price())
      .field("rentPrice",  faker.commerce.price())
      .field("quantity", faker.datatype.number())
      .field("brand", '')
      .field("newUsed", faker.commerce.productAdjective())
      .field("description", faker.commerce.productDescription())
      .attach('picture', 'C:/Users/g0308/OneDrive/Pictures/profile.jpg')
      .set('Authorization', `Bearer ${token}`)
      .set('Content-Type', 'multipart/form-data')
    
    expect(res.statusCode).toBe(401)
    expect(res.body.message).toMatch(/product could not be created/i)
  })
  it('should not publish product if state field is empty', async() => {
    const res = await req(app)
      .post('/products/publish')
      .field("nameProduct",faker.commerce.product())
      .field("buyPrice", faker.commerce.price())
      .field("rentPrice",  faker.commerce.price())
      .field("quantity", faker.datatype.number())
      .field("brand", faker.company.companyName())
      .field("newUsed", "")
      .field("description", faker.commerce.productDescription())
      .attach('picture', 'C:/Users/g0308/OneDrive/Pictures/profile.jpg')
      .set('Authorization', `Bearer ${token}`)
      .set('Content-Type', 'multipart/form-data')
    
    expect(res.statusCode).toBe(401)
    expect(res.body.message).toMatch(/product could not be created/i)
  })
  it('should not publish product if description field is empty', async() => {
    const res = await req(app)
      .post('/products/publish')
      .field("nameProduct",faker.commerce.product())
      .field("buyPrice", faker.commerce.price())
      .field("rentPrice",  faker.commerce.price())
      .field("quantity", faker.datatype.number())
      .field("brand", faker.company.companyName())
      .field("newUsed", faker.commerce.productAdjective())
      .field("description", '')
      .attach('picture', 'C:/Users/g0308/OneDrive/Pictures/profile.jpg')
      .set('Authorization', `Bearer ${token}`)
      .set('Content-Type', 'multipart/form-data')
    
    expect(res.statusCode).toBe(401)
    expect(res.body.message).toMatch(/product could not be created/i)
  })
  it('should not publish product if a picture field is empty', async() => {
    const res = await req(app)
      .post('/products/publish')
      .field("nameProduct",faker.commerce.product())
      .field("buyPrice", faker.commerce.price())
      .field("rentPrice",  faker.commerce.price())
      .field("quantity", faker.datatype.number())
      .field("brand", faker.company.companyName())
      .field("newUsed", faker.commerce.productAdjective())
      .field("description", faker.commerce.productDescription())
      .attach('picture', '')
      .set('Authorization', `Bearer ${token}`)
      .set('Content-Type', 'multipart/form-data')
    
    expect(res.statusCode).toBe(401)
    expect(res.body.message).toMatch(/product could not be created/i)
  })
})